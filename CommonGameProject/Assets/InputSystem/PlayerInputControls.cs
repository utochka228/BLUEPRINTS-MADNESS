//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputSystem/PlayerInputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace InputPresets
{
    public partial class @PlayerInputControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputControls"",
    ""maps"": [
        {
            ""name"": ""Vehicle Controls"",
            ""id"": ""c55ac341-b266-4e72-9442-0b01899d2d5a"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""e296fdfd-7a26-419d-a099-b8b1e7412abc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Gas"",
                    ""type"": ""Button"",
                    ""id"": ""48b81ab4-d242-4e43-9cc3-55bc148f0aac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Button"",
                    ""id"": ""c022e6d6-6b8a-4cec-a82a-d05cc693d910"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""44a44052-46b7-4ce9-ac8e-7778949c24ea"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mobile"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""9bdaee91-0f2e-487a-8bb6-a6b4b109ee48"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ff01ff5b-368c-4019-9b48-f605aeeab2bb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Editor"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0eb6937f-5033-494c-9206-55e93c34d775"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Editor"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""beb0584b-32a5-4f63-a859-6e5bfdc2b9e8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Editor"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""81abf51d-df86-45ee-86ad-f16a79bf7a7d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Editor"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4427bfdc-eb71-460d-8107-9ecf1fc632f5"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gas"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7582be65-8b77-46d7-ae2d-43a42f708015"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu Controls"",
            ""id"": ""427890b3-c8ac-47a9-8c91-09da4cab15f6"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""9c49b7bb-4ade-400a-a6c7-f8532603e586"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ae69ae3f-e231-46f9-95ef-6205b0dab439"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Editor"",
            ""bindingGroup"": ""Editor"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Mobile"",
            ""bindingGroup"": ""Mobile"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Vehicle Controls
            m_VehicleControls = asset.FindActionMap("Vehicle Controls", throwIfNotFound: true);
            m_VehicleControls_Movement = m_VehicleControls.FindAction("Movement", throwIfNotFound: true);
            m_VehicleControls_Gas = m_VehicleControls.FindAction("Gas", throwIfNotFound: true);
            m_VehicleControls_Brake = m_VehicleControls.FindAction("Brake", throwIfNotFound: true);
            // Menu Controls
            m_MenuControls = asset.FindActionMap("Menu Controls", throwIfNotFound: true);
            m_MenuControls_Newaction = m_MenuControls.FindAction("New action", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Vehicle Controls
        private readonly InputActionMap m_VehicleControls;
        private IVehicleControlsActions m_VehicleControlsActionsCallbackInterface;
        private readonly InputAction m_VehicleControls_Movement;
        private readonly InputAction m_VehicleControls_Gas;
        private readonly InputAction m_VehicleControls_Brake;
        public struct VehicleControlsActions
        {
            private @PlayerInputControls m_Wrapper;
            public VehicleControlsActions(@PlayerInputControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_VehicleControls_Movement;
            public InputAction @Gas => m_Wrapper.m_VehicleControls_Gas;
            public InputAction @Brake => m_Wrapper.m_VehicleControls_Brake;
            public InputActionMap Get() { return m_Wrapper.m_VehicleControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(VehicleControlsActions set) { return set.Get(); }
            public void SetCallbacks(IVehicleControlsActions instance)
            {
                if (m_Wrapper.m_VehicleControlsActionsCallbackInterface != null)
                {
                    @Movement.started -= m_Wrapper.m_VehicleControlsActionsCallbackInterface.OnMovement;
                    @Movement.performed -= m_Wrapper.m_VehicleControlsActionsCallbackInterface.OnMovement;
                    @Movement.canceled -= m_Wrapper.m_VehicleControlsActionsCallbackInterface.OnMovement;
                    @Gas.started -= m_Wrapper.m_VehicleControlsActionsCallbackInterface.OnGas;
                    @Gas.performed -= m_Wrapper.m_VehicleControlsActionsCallbackInterface.OnGas;
                    @Gas.canceled -= m_Wrapper.m_VehicleControlsActionsCallbackInterface.OnGas;
                    @Brake.started -= m_Wrapper.m_VehicleControlsActionsCallbackInterface.OnBrake;
                    @Brake.performed -= m_Wrapper.m_VehicleControlsActionsCallbackInterface.OnBrake;
                    @Brake.canceled -= m_Wrapper.m_VehicleControlsActionsCallbackInterface.OnBrake;
                }
                m_Wrapper.m_VehicleControlsActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Movement.started += instance.OnMovement;
                    @Movement.performed += instance.OnMovement;
                    @Movement.canceled += instance.OnMovement;
                    @Gas.started += instance.OnGas;
                    @Gas.performed += instance.OnGas;
                    @Gas.canceled += instance.OnGas;
                    @Brake.started += instance.OnBrake;
                    @Brake.performed += instance.OnBrake;
                    @Brake.canceled += instance.OnBrake;
                }
            }
        }
        public VehicleControlsActions @VehicleControls => new VehicleControlsActions(this);

        // Menu Controls
        private readonly InputActionMap m_MenuControls;
        private IMenuControlsActions m_MenuControlsActionsCallbackInterface;
        private readonly InputAction m_MenuControls_Newaction;
        public struct MenuControlsActions
        {
            private @PlayerInputControls m_Wrapper;
            public MenuControlsActions(@PlayerInputControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Newaction => m_Wrapper.m_MenuControls_Newaction;
            public InputActionMap Get() { return m_Wrapper.m_MenuControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MenuControlsActions set) { return set.Get(); }
            public void SetCallbacks(IMenuControlsActions instance)
            {
                if (m_Wrapper.m_MenuControlsActionsCallbackInterface != null)
                {
                    @Newaction.started -= m_Wrapper.m_MenuControlsActionsCallbackInterface.OnNewaction;
                    @Newaction.performed -= m_Wrapper.m_MenuControlsActionsCallbackInterface.OnNewaction;
                    @Newaction.canceled -= m_Wrapper.m_MenuControlsActionsCallbackInterface.OnNewaction;
                }
                m_Wrapper.m_MenuControlsActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Newaction.started += instance.OnNewaction;
                    @Newaction.performed += instance.OnNewaction;
                    @Newaction.canceled += instance.OnNewaction;
                }
            }
        }
        public MenuControlsActions @MenuControls => new MenuControlsActions(this);
        private int m_EditorSchemeIndex = -1;
        public InputControlScheme EditorScheme
        {
            get
            {
                if (m_EditorSchemeIndex == -1) m_EditorSchemeIndex = asset.FindControlSchemeIndex("Editor");
                return asset.controlSchemes[m_EditorSchemeIndex];
            }
        }
        private int m_MobileSchemeIndex = -1;
        public InputControlScheme MobileScheme
        {
            get
            {
                if (m_MobileSchemeIndex == -1) m_MobileSchemeIndex = asset.FindControlSchemeIndex("Mobile");
                return asset.controlSchemes[m_MobileSchemeIndex];
            }
        }
        public interface IVehicleControlsActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnGas(InputAction.CallbackContext context);
            void OnBrake(InputAction.CallbackContext context);
        }
        public interface IMenuControlsActions
        {
            void OnNewaction(InputAction.CallbackContext context);
        }
    }
}
